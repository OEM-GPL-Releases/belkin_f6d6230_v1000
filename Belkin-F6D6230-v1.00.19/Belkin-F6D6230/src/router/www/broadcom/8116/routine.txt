
function isBlank(s)
{
	var i;
	var c;
	for(i=0;i<s.length;i++)
	{
		c=s.charAt(i);
		if((c!=' ')&&(c!='\n')&&(c!='\t'))return false;
	}
	return true;
}

function isIncludeDQuote(s)
{
	var i;
	var c;
	for(i=0;i<s.length;i++)
	{
		c=s.charAt(i);
		if((c=='"'))return true;
	}
	return false;
}

function isIncludeBSlash(s)
{
	var i;
	var c;
	for(i=0;i<s.length;i++)
	{
		c=s.charAt(i);
		if((c=='\\'))return true;
	}
	return false;
}

function isBlank_Zero(s)
{
	var i;
	var c;
	for(i=0;i<s.length;i++){
		c=s.charAt(i);
		if((c!=' ')&&(c!='\n')&&(c!='\t')&&(c!='0'))return false;
	}
	return true;
}

function isNvaliduser(s) {
	var j,x = 0;
	for(var i = 0; i < s.length; i++) {
		var c = s.charAt(i);
		if ((c=='<') || (c=='>') || (c=='&'))
		{
			//alert(c);
			return true;
		}
	}

	return false;
}

function isNValidInt(s)
{
	var i, c;
	
	for (i=0; i<s.length; i++) {
		c = s.charCodeAt(i);
		if ((c < 48) || (c > 57))
			return true;
	}
	return false;
}

function isNegInt(s)
{
	if (s<0)
		return true;
	else
		return false;
}

function isNValidFirstIP(s) {
	if((isBlank(s))||(isNaN(s))||(isNValidInt(s))||(isNegInt(s))||(s<1||s>223))
		return true;
	else
		return false;
}

function isNValidIP(s) {
	if((isBlank(s))||(isNaN(s))||(isNValidInt(s))||(isNegInt(s))||(s<0||s>255))
		return true;
	else
		return false;
}

function isNValidLastIP(s) {
	if((isBlank(s))||(isNaN(s))||(isNValidInt(s))||(isNegInt(s))||(s<1||s>254))
		return true;
	else
		return false;
}

function isNValidMask(s) {
	if ((s == 255) || (s == 254) || (s == 252) || (s == 248) || (s == 240) || (s == 224) || (s == 192) || (s == 128) || (s == 0))
		return false;
	return true;
}

function isNValidLastMask(s) {
	//if ( (s == 254) || (s == 252) || (s == 248) || (s == 240) || (s == 224) || (s == 192) || (s == 128) || (s == 0) )
	if ( (s == 252) || (s == 248) || (s == 240) || (s == 224) || (s == 192) || (s == 128) || (s == 0) )
		return false;
	return true;
}

function isNValidSubnetMask(s1, s2, s3, s4) {
	if (s1 != 255)
		return true;

	if ((isNValidMask(s2)) || (isNValidMask(s3)) || (isNValidLastMask(s4)))
		return true;
	
	if (s2 != 255)
	{
		if ((s3 != 0) || (s4 != 0))
			return true;
	}
	
	if ((s3 != 255) && (s3 != 0))
	{
		if ((s2 != 255) || (s4 != 0))
			return true;
	}
	if(s3==0 && s4!=0)
	    return true;
	
	return false;
}

function isNValidPort(s) {
	if((isBlank(s))||(isNaN(s))||(isNValidInt(s))||(isNegInt(s))||(s<1||s>65535))
		return true;
	else
		return false;
}

function isNValidPortAllowZero(s) {
	if((isBlank(s))||(isNaN(s))||(isNValidInt(s))||(isNegInt(s))||(s<0||s>65535))
		return true;
	else
		return false;
}

function is2Hex(s) {
	var j,x = 0;
	for(var i = 0; i < s.length; i++) {
		var c = s.charAt(i);
		j = parseInt(c,16);
		if ((j == 0) || (j == 1)|| (j == 2)|| (j == 3)|| (j == 4)|| (j == 5)|| (j == 6)
			|| (j == 7)|| (j == 8)|| (j == 9)|| (j == 10)|| (j == 11)|| (j == 12)|| (j == 13)|| (j == 14)|| (j == 15)) {
			if(x==1)	return false;
			x=1;
		}
	}
	return true;
}

function isHex(s) {
	var j, x = 0;	
	for (var i = 0 ; i < s.length; i++) {
		var c = s.charAt(i);
		j = parseInt(c, 16);
		if (!((j == 0) || (j == 1)|| (j == 2)|| (j == 3)|| (j == 4)|| (j == 5)|| (j == 6)
			|| (j == 7)|| (j == 8)|| (j == 9)|| (j == 10)|| (j == 11)|| (j == 12)|| (j == 13)
			|| (j == 14)|| (j == 15))) {
			x = 1;
		}
		if (x == 1) return false;
	}
	return true;
}

function isNValid(s) {
	if( isBlank(s) || is2Hex(s))
		return true;
	else
		return false;
}

function isNValids(s) {
	if( isBlank(s) || isHex(s))
		return true;
	else
		return false;
}

function MM_openBrWindow(theURL,winName,features){
  window.open(theURL,winName,features);
}

function getElementsByFieldName(target_form, field)
{
 var i;
 var form;
 var value;
 if(target_form == null || field == null) return -1;
 for(i=0; i<target_form.length; i++)
 {
  if(target_form.elements[i].name == field)  
   return i;
 }
 return -1;
}

function isNValidNum(s) {
	if((isBlank(s)) || (isNaN(s))||(isNValidInt(s))||(isNegInt(s)))
		return true;
	else
		return false;
}

function isNValidUnicastIP(s) {
	if((isBlank(s))||(isNaN(s))||(isNValidInt(s))||(isNegInt(s))||(s<=0||s>=224))
		return true;
	else
		return false;
}

ipmUcast='The first entry of IP address must be within range 1 - 223.';

function MM_jumpMenu(targ,selObj,restore){ //v3.0
  eval(targ+".location='"+selObj.options[selObj.selectedIndex].value+"'");
  if (restore) selObj.selectedIndex=0;
}

//heyu_20070227 +++ for #329
// isValidIPAddress
// Allows to check one or more sections of an IP address to be numerical and within the correct range
// Expects the references to the textbox input control objects as arguments
// Used in all pages with IP address input
function isValidIPAddress(){
  var net_id;
  var host_id;	
  var args = isValidIPAddress.arguments;
  if(args.length < 1)
    return false;
  switch (args.length) {
    case 4: // for complete IP address, check for special first and last section

    
	  if(isNValidIP(args[0].value) == true) return 1;
      if(isNValidIP(args[1].value) == true) return 2;
      if(isNValidIP(args[2].value) == true) return 3;
      if(isNValidIP(args[3].value) == true) return 4;
      
      if (args[0].value > 0xff || args[1].value > 0xff || args[2].value > 0xff || args[3].value > 0xff)

        return 1;//heyu 20060227 add for valid IP NTC bug 16
        
      if(args[0].value < 128) /* A class */
      {
        if(args[0].value == 0 || args[0].value == 127)
            return 1;
        host_id = parseInt(args[1].value, 10) * 0x10000 + parseInt(args[2].value, 10) * 0x100 + parseInt(args[3].value, 10) * 0x1; //heyu_20070227 for #329

        if(host_id == 0 || host_id == 0xffffff)
            return 2;
      }
      else if(args[0].value < 192) /* B class */
      {
        host_id = parseInt(args[2].value, 10) * 0x100 + parseInt(args[3].value, 10) * 0x1;//heyu_20070227 for #329

        if(host_id == 0 || host_id == 0xffff)
            return 3;
      }
      else if(args[0].value < 224) /* C class */
      {
        host_id = args[3].value * 0x1;
        if(host_id == 0 || host_id == 0xff)
            return 4;
      }
      else  /* Limit broadcast, Multicast net */
      {
        return 1;//heyu 20060227 revise for valid IP NTC bug 16
      }              
      if (args[0].value == 10 && args[1].value == 1 &&  args[2].value == 1 &&  args[3].value == 1) //heyu_20060227 for '10.1.1.1' is not valid IP

      {
     	return 1;//heyu 20060227 add for valid IP NTC bug 16
    }
      break;
    default:
      for(var i=0; i<args.length; i++) {
        if(intCheck(args[i], 10, 0, 255) == false) {
          return (i+1);
        }
      }
  }
  return 0;    
}

function isValidIPAddress3(a1,a2,a3,a4,m1,m2,m3,m4){
  var net_id;
  var host_id;	
	  if(isNValidIP(a1.value) == true) return 1;
      if(isNValidIP(a2.value) == true) return 2;
      if(isNValidIP(a3.value) == true) return 3;
      if(isNValidIP(a4.value) == true) return 4;
      net_id =parseInt(m1.value, 10) * 0x1000000 +parseInt(m2.value, 10) * 
0x10000 + parseInt(m3.value, 10) * 0x100 + parseInt(m4.value, 10) * 0x1;

      host_id =parseInt(a1.value, 10) * 0x1000000 +parseInt(a2.value, 10) * 
0x10000 + parseInt(a3.value, 10) * 0x100 + parseInt(a4.value, 10) * 0x1;

		if ((host_id|net_id)==-1) {//heyu_20070227 for #329
			return 4;//heyu_20070227 for #329
		}//heyu_20070227 for #329
		if ((host_id&net_id)==host_id) {//heyu_20070227 for #329
			return 4;//heyu_20070227 for #329
		}//heyu_20070227 for #329		
	return 0;
}
//heyu_20070227 +++ for #329


